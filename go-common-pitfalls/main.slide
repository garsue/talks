Goのハマりがちなところ
Otemachi.go #1
20 Mar 2019

garsue
Engineer, MF KESSAI, Inc.
osuga.shunya@mfkessai.co.jp
@__garsue__

* Go書き始めた人向けの話をします

* 自己紹介

.image images/icon.png 200 _

- garsue
- 2017/07/01入社
- Go歴4年くらい、そのまえはJavaとかPythonとか

* Go is simple...?

Goは比較的驚きの少ない言語仕様だと思ってますが、
それでも知らないとハマりがちなところがあります。

よくやりがちところや自分の経験を元に、ざっとご紹介。

* ハマりがちなところ

- ループ変数とクロージャ
- ループ変数のポインタ
- deferの引数評価タイミング
- 型付nil (typed nil)
- `time.Time` と `AddDate`
- テストの実行単位

* ループ変数とクロージャ

.play closure/main.go

再代入されるので・・・

* ループ変数のポインタ

.play pointer/main.go

ループ変数のポインタを取ると・・・

* 対策

scopelintを使おう
.link https://github.com/kyoh86/scopelint
.link https://qiita.com/kyoh86/items/97911180d6254d5fc90c

前述の例だとこんな感じで怒られる

    $ scopelint ./...
    closure/main.go:11:16: Using the variable on range scope "i" in function literal
    pointer/main.go:10:20: Using a reference for the variable on range scope "i"
    Found 2 lint problems; failing.

*参考*

ループでgoroutine起こすときに特にやりがち、という話。
.link https://github.com/golang/go/wiki/CommonMistakes

* deferの評価タイミング

.play defer/main.go

`defer` 時点で引数を評価するので・・・

* 対策

.play defer2/main.go

最終的な値を評価したい場合は関数で
ラップしよう

* 型付nil (typed nil)

.play typednil/main.go

一体何が起こっているんだ・・・

* 型付nil (typed nil) とは

型のみを持ったinterface値のこと。

interfaceは内部的に型と値を持っている。
`nil` と比較して真になるのは型と値いずれも未設定の場合のみ。
値としては未設定でも型を持っている場合は `nil` として扱われなくなる。

詳しくは下記を見るべし。

.link https://golang.org/doc/faq
.link https://dave.cheney.net/2017/08/09/typed-nils-in-go-2

Go2でどうにかする議論もあったけど、直近でいい感じの改善策はなかったっぽい
.link https://github.com/golang/go/issues/27890

* 対策は・・・

- 値が空になるようなinterfaceの変数を宣言しない
- interfaceと `nil` を比較する場合は気をつける
- テスト書く

ぐらい？？

* time.Time と AddDate

.play time1/main.go

2月末日にはならない

* 対策

月単位の操作をする場合は一度月初日を取る。

.play time2/main.go


* テストの実行単位

.code p/chan.go
.code p/p1/foo_test.go /START OMIT/,/END OMIT/

みたいな何らかのリソースをロックするテストがあったとして・・・

* テストの実行単位

.code p/p2/foo_test.go

みたいな別パッケージのテストからロックをとろうとしても
パッケージをまたぐテスト間でロックされなれない！
（手頃な例が作れなかったです、ごめんなさい）

* テストの実行はパッケージ単位で別プロセス

    go test ./...

みたいに複数パッケージのテストを実行した場合、各パッケージごとにテストがコンパイルされます。
実行もパッケージごとにコンパイルされたバイナリが使われるので、
パッケージ変数を共有したつもりでも実は共有されていません。

* 対策

- パッケージ間で共有してる変数に依存した構成を見直す
- テストの並列度を1にする( `-p` オプションで指定可能)
- 一括実行せずテストを実行するパッケージの順序を調整する
- lockファイルでゴニョゴニョする
